%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.59.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2476 1740
%%HiResBoundingBox: 0 0 2475.1199 1740
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2475.1199 1740 re
W
q
[0.24 0 0 -0.24 0 1740] cm
q
0 0 10312.5 7250 re
W*
q
[3.124984 0 0 3.124731 0.0271281 0] cm
/DeviceRGB {} CS
[0.9686 0.9843 0.9882] SC
/DeviceRGB {} cs
[0.9686 0.9843 0.9882] sc
0 0 3300 2320.1997 re
f
Q
q
[2953.1101 0 0 2952.8716 2249.2603 936.68097] cm
q
0.965 0.016 m
0.636 0.557 l
0.048 0.208 l
0.033 0.199 0.013 0.204 0.004 0.219 c
0 0.227 -0.001 0.236 0.002 0.245 c
0.306 1.176 l
0.31 1.19 0.322 1.2 0.337 1.2 c
1.648 1.2 l
1.663 1.2 1.675 1.189 1.679 1.174 c
1.983 0.245 l
1.988 0.228 1.979 0.21 1.963 0.205 c
1.954 0.202 1.944 0.203 1.936 0.208 c
1.349 0.557 l
1.02 0.016 l
1.007 -0.005 0.978 -0.005 0.965 0.016 c
0.965 0.016 l
h
W
[1.984126 0 0 1.19975 0.000255677 0.000250161] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.000633 def
/yMin -0.004376 def
/xMax 1.001823 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.345 mul 0.514 add
1 index 1 exp 0.321 mul 0.31 add
2 index 1 exp 0.286 mul 0.165 add
4 3 roll pop 
}
/xpdfFunc0_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.345 mul 0.859 add
1 index 1 exp -0.321 mul 0.631 add
2 index 1 exp -0.286 mul 0.451 add
4 3 roll pop 
}
/xpdfFunc0_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc0_0 } {
0.5 sub 2 mul 0 add xpdfFunc0_1
} ifelse
}
def
-0.000633 1.001823 0 axialSH
Q
Q
q
[33.086113 0 0 33.083439 468.77466 4593.8174] cm
/DeviceRGB {} CS
[0.0667 0.0667 0.0667] SC
/DeviceRGB {} cs
[0.0667 0.0667 0.0667] sc
13.68 21.84 m
9.76 21.84 l
9.76 17.639999 l
9.76 15.679999 8.280001 14.719999 6.84 14.719999 c
5.36 14.719999 3.92 15.679999 3.92 17.639999 c
3.92 21.84 l
3.92 24.32 13.68 23.24 13.68 30.52 c
13.68 34.440002 l
13.68 38.640003 10.24 40.760002 6.84 40.760002 c
3.4 40.760002 0 38.640003 0 34.440002 c
0 30.240002 l
3.92 30.240002 l
3.92 34.440002 l
3.92 36.400002 5.36 37.360001 6.84 37.360001 c
8.280001 37.360001 9.76 36.400002 9.76 34.440002 c
9.76 30.240002 l
9.76 27.480001 0 28.840002 0 21.840002 c
0 17.640003 l
0 13.440003 3.4 11.320004 6.84 11.320004 c
10.24 11.320004 13.68 13.440003 13.68 17.640003 c
13.68 21.840004 l
13.68 21.84 l
h
34.07 40 m
33.470001 36.639999 l
27.910002 36.639999 l
27.350002 40 l
23.430002 40 l
28.630001 12.040001 l
28.830002 12.040001 l
32.75 12.040001 l
37.950001 40 l
34.07 40 l
h
28.629999 32.720001 m
32.790001 32.720001 l
30.710001 20.920002 l
28.629999 32.720001 l
h
58.060001 12 m
61.940002 12 l
61.940002 40 l
58.060001 40 l
51.620003 22.559999 l
51.620003 40 l
47.700005 40 l
47.700005 12 l
51.620003 12 l
58.060001 29.440001 l
58.060001 12 l
h
71.690002 40.040001 m
71.690002 12.080002 l
75.610001 12.080002 l
75.610001 40.040001 l
71.690002 40.040001 l
h
85.360001 12 m
98.839996 12 l
98.839996 15.92 l
94.039993 15.92 l
94.039993 40 l
90.159996 40 l
90.159996 15.92 l
85.359993 15.92 l
85.359993 12 l
85.360001 12 l
h
108.589996 40.040001 m
108.589996 12.080002 l
112.509995 12.080002 l
112.509995 40.040001 l
108.589996 40.040001 l
h
136.5 12 m
136.5 15.92 l
127.020004 36.080002 l
136.5 36.080002 l
136.5 40 l
122.260002 40 l
122.260002 36.080002 l
131.740005 15.920002 l
122.26001 15.920002 l
122.26001 12.000002 l
136.500015 12.000002 l
136.5 12 l
h
158.809998 15.96 m
150.169998 15.96 l
150.169998 22.4 l
157.410004 22.4 l
157.410004 26.32 l
150.169998 26.32 l
150.169998 36.16 l
158.809998 36.16 l
158.809998 40.040001 l
150.169998 40.040001 l
146.25 40.040001 l
146.25 12.080002 l
158.809998 12.080002 l
158.809998 15.960002 l
158.809998 15.96 l
h
181.96001 24.879999 m
181.96001 27.799999 180.24001 29.879999 177.56001 30.359999 c
181.96001 40 l
177.76001 40 l
173.44 30.48 l
172.48 30.48 l
172.48 40 l
168.56 40 l
168.56 12 l
176.36 12 l
179.72 12 181.96001 14.24 181.96001 17.6 c
181.96001 24.880001 l
181.96001 24.879999 l
h
178.03999 23.799999 m
178.03999 18.68 l
178.03999 16.639999 177.31999 15.92 175.23999 15.92 c
172.48 15.92 l
172.48 26.560001 l
175.23999 26.560001 l
177.31999 26.560001 178.03999 25.840002 178.03999 23.800001 c
178.03999 23.799999 l
h
222.25999 39.959999 m
218.09999 39.959999 l
211.37999 27.919998 l
211.37999 39.959999 l
207.45999 39.959999 l
207.45999 12 l
211.37999 12 l
211.37999 22 l
217.21999 12 l
221.41998 12 l
213.85999 24.880001 l
222.25999 39.959999 l
h
232.00999 40.040001 m
232.00999 12.080002 l
235.92999 12.080002 l
235.92999 40.040001 l
232.00999 40.040001 l
h
256.04001 12 m
259.92001 12 l
259.92001 40 l
256.04001 40 l
249.60001 22.559999 l
249.60001 40 l
245.68001 40 l
245.68001 12 l
249.60001 12 l
256.04001 29.440001 l
256.04001 12 l
h
276.70999 26.440001 m
283.35001 26.440001 l
283.35001 30.280001 l
283.35001 34.440002 l
283.35001 38.68 279.91 40.800003 276.51001 40.800003 c
273.07001 40.800003 269.67001 38.680004 269.67001 34.440002 c
269.67001 17.680002 l
269.67001 13.440002 273.07001 11.320002 276.51001 11.320002 c
279.91 11.320002 283.35001 13.440002 283.35001 17.680002 c
283.35001 21.840002 l
279.42999 21.840002 l
279.42999 17.080002 l
279.42999 15.680002 277.94998 15.000002 276.50998 15.000002 c
275.02997 15.000002 273.58997 15.680002 273.58997 17.080002 c
273.58997 35.280003 l
273.58997 36.720001 275.02997 37.400002 276.50998 37.400002 c
277.94998 37.400002 279.42999 36.720001 279.42999 35.280003 c
279.42999 30.320004 l
276.70999 30.320004 l
276.70999 26.440002 l
276.70999 26.440001 l
h
f
Q
q
[34.669075 0 0 34.666271 1406.26978 6085.1919] cm
q
4.26 19.92 m
2.16 12.04 l
1.86 12.54 l
1.86 19.98 l
0 19.98 l
0 5.719999 l
1.86 5.719999 l
1.86 8.82 l
3.1 5.72 l
5.400001 5.72 l
3.500001 9.84 l
6.200001 19.92 l
4.260001 19.92 l
4.26 19.92 l
h
23.202499 12.46 m
20.442499 12.46 l
20.442499 18.1 l
23.2225 18.1 l
23.2225 20 l
18.5425 20 l
18.5425 5.72 l
23.2225 5.72 l
23.2225 7.62 l
20.442499 7.62 l
20.442499 10.56 l
23.202499 10.56 l
23.202499 12.460001 l
23.202499 12.46 l
h
40.625 12.46 m
37.865002 12.46 l
37.865002 18.1 l
40.645 18.1 l
40.645 20 l
35.965 20 l
35.965 5.72 l
40.645 5.72 l
40.645 7.62 l
37.865002 7.62 l
37.865002 10.56 l
40.625 10.56 l
40.625 12.460001 l
40.625 12.46 l
h
55.287498 17 m
55.287498 19.98 l
53.387497 19.98 l
53.387497 5.719999 l
56.347496 5.719999 l
57.667496 5.719999 58.727497 6.799999 58.727497 8.119999 c
58.727497 14.619999 l
58.727497 15.939999 57.667496 17 56.347496 17 c
55.287495 17 l
55.287498 17 l
h
55.287498 7.62 m
55.287498 15.1 l
56.3475 15.1 l
56.627499 15.1 56.827499 14.900001 56.827499 14.620001 c
56.827499 8.120001 l
56.827499 7.840001 56.627499 7.620001 56.3475 7.620001 c
55.287498 7.620001 l
55.287498 7.62 l
h
89.112503 5.68 m
89.112503 19.92 l
87.212502 19.92 l
87.212502 5.68 l
89.112503 5.68 l
89.112503 5.68 l
h
108.775002 5.68 m
108.775002 7.6 l
106.395004 7.6 l
106.395004 20.02 l
104.475006 20.02 l
104.475006 7.6 l
101.855003 7.6 l
101.855003 5.68 l
108.775002 5.68 l
108.775002 5.68 l
h
139.940002 19.959999 m
138.460007 19.959999 137.26001 18.759998 137.26001 17.279999 c
137.26001 8.399999 l
137.26001 6.919999 138.460007 5.719998 139.940002 5.719998 c
141.419998 5.719998 142.619995 6.919998 142.619995 8.399999 c
142.619995 9.199999 l
140.720001 9.199999 l
140.720001 8.399999 l
140.720001 7.979999 140.360001 7.619999 139.940002 7.619999 c
139.520004 7.619999 139.160004 7.979999 139.160004 8.399999 c
139.160004 17.279999 l
139.160004 17.699999 139.520004 18.059999 139.940002 18.059999 c
140.360001 18.059999 140.720001 17.699999 140.720001 17.279999 c
140.720001 15.999999 l
142.619995 15.999999 l
142.619995 17.279999 l
142.619995 18.759998 141.419998 19.959999 139.940002 19.959999 c
h
157.242493 18.120001 m
160.002487 18.120001 l
160.002487 20 l
155.362488 20 l
155.362488 5.64 l
157.242493 5.64 l
157.242493 18.119999 l
157.242493 18.120001 l
h
177.405 12.46 m
174.645 12.46 l
174.645 18.1 l
177.425 18.1 l
177.425 20 l
172.74501 20 l
172.74501 5.72 l
177.425 5.72 l
177.425 7.62 l
174.645 7.62 l
174.645 10.56 l
177.405 10.56 l
177.405 12.460001 l
177.405 12.46 l
h
195.0275 20 m
194.3075 15.06 l
192.28749 15.06 l
191.62749 20 l
189.70749 20 l
191.86749 5.7 l
194.44749 5.7 l
196.94749 20 l
195.0275 20 l
h
192.5475 13.16 m
194.0275 13.16 l
193.2675 7.96 l
192.5475 13.16 l
h
214.33 16.719999 m
214.41 5.639999 l
216.33 5.639999 l
216.21001 20.079998 l
213.23001 20.079998 l
211.61002 8.899998 l
211.61002 20.079998 l
209.69002 20.079998 l
209.69002 5.639998 l
212.79002 5.639998 l
214.33 16.719999 l
h
W
[216.330004 0 0 14.44 -0.000000377053 5.640005] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin -0 def
/xMax 1 def
/yMax 0.999999 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.345 mul 0.514 add
1 index 1 exp 0.321 mul 0.31 add
2 index 1 exp 0.286 mul 0.165 add
4 3 roll pop 
}
/xpdfFunc1_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.345 mul 0.859 add
1 index 1 exp -0.321 mul 0.631 add
2 index 1 exp -0.286 mul 0.451 add
4 3 roll pop 
}
/xpdfFunc1_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc1_0 } {
0.5 sub 2 mul 0 add xpdfFunc1_1
} ifelse
}
def
0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
