{"remainingRequest":"/Users/jamiesokolsky/sanitizer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jamiesokolsky/sanitizer/src/components/SinglePage.vue?vue&type=template&id=0a1884b2&","dependencies":[{"path":"/Users/jamiesokolsky/sanitizer/src/components/SinglePage.vue","mtime":1591377402410},{"path":"/Users/jamiesokolsky/sanitizer/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jamiesokolsky/sanitizer/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jamiesokolsky/sanitizer/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/jamiesokolsky/sanitizer/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jamiesokolsky/sanitizer/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}